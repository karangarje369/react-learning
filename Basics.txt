-Things to keep in mind 1.State , 2.Rerendering , 3.Components

-State- An state is the object that represents the current state of the app .
       It represents the dynamic things in your app (things that change)
       For ex. the counter in the react boilerplate

-Rerendering- A state change triggers re-render  
             A re-render represents the actual DOM being manipulated when state changes

           
-Components-


-Virtual DOM - 


-Rerendering Problem - 
  so if we add any state in the root component (main component / Parent) which is goona change after the render (wen loads) so the whole component gets re-render so to avoid that we declare the state that is changing in the nearest ancestors

-memo
memo lets you skip re-rendering a component when its props are unchanged.

const MemoizedComponent = memo(SomeComponent, arePropsEqual?)



-Hooks(React 16.8) : These function that start with use are called hooks 

-Hooks in react are functions that allow you to "hook into" React state and lifecycle features from function components.

-Hooks based on lifecycle (use to hook into lifecycle event)
-useEffect - this hook lets you do something as the component gets mounted 


-Side Effects -->
In React, the concept of side effects encompasses any operations that reach outside the functions scope of a React component. These operations can affect oth' components, interact with browser, or perform asynchronous data fetching. (setInterval,fetch,setInterval,Dom manipulation)

-Hooks-->
useState Hook - lets you describe the state of your app whenever state updates , it triggers a re-render which finally results in a DOM update  

-useEffect Hook - The 'useEffect' hook is a feature in React , a popular Javascript library for building user interface. It allows you to perform side effects in function components. Side effects are operations that can affect other components or cant be done during rendering, such as data fetching , subscriptions or manually changing the DOM in React components.

useMemo-
 Better SOlutuion - memorize the value across re-render , only recalculate it if inputval changes 
 so the problem with this was if counter gets change then everything gets re-render so to avoid that we used useMemoso now if we update the counter with the use of useMemo we prevented the re-render of other states 
 what if we have used useEffect on inputvalue so then extra state we need and also extra re-render will happen when we try to update the inputvalue 
 useMemo lets you cache(not exactly but similar) the state 


 useCallback- `useCallback` is a hook in React , a popular Javascript library for building user interfaces. It is used to memoize functions , which can help in optimizing the performance of your application, especially in cases involving child components that rely on refrence equality to prevent unnecessary renders




 üß† 1Ô∏è‚É£ React.memo ‚Äî for components
‚û§ What it does

React.memo is a higher-order component (HOC) that wraps a component and memoizes its rendered output.

It tells React:

‚ÄúOnly re-render this component if its props have changed.‚Äù